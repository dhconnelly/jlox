dev.dhc.lox.IntegrationTest.testEvaluate[inputs/evaluate/call_errors.lox]=[
  {
    "code": 70,
    "outLines": [ ],
    "errLines": [
      "[line 1] Error: foo: want CALLABLE, got STR"
    ]
  }
]


dev.dhc.lox.IntegrationTest.testEvaluate[inputs/evaluate/control_flow.lox]=[
  {
    "code": 0,
    "outLines": [
      "true",
      "false",
      "false",
      "false",
      "true",
      "false",
      "true",
      "true"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testEvaluate[inputs/evaluate/empty.lox]=[
  {
    "code": 0,
    "outLines": [ ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testEvaluate[inputs/evaluate/plus_bad_types_error.lox]=[
  {
    "code": 70,
    "outLines": [ ],
    "errLines": [
      "[line 1] Error: operands to + must be both string or number"
    ]
  }
]


dev.dhc.lox.IntegrationTest.testEvaluate[inputs/evaluate/plus_same_types_error.lox]=[
  {
    "code": 70,
    "outLines": [ ],
    "errLines": [
      "[line 1] Error: 7.0: want STR, got NUM"
    ]
  }
]


dev.dhc.lox.IntegrationTest.testEvaluate[inputs/evaluate/unary_error.lox]=[
  {
    "code": 70,
    "outLines": [ ],
    "errLines": [
      "[line 1] Error: foo: want NUM, got STR"
    ]
  }
]


dev.dhc.lox.IntegrationTest.testEvaluate[inputs/evaluate/values.lox]=[
  {
    "code": 0,
    "outLines": [
      "true",
      "false",
      "nil",
      "foo bar baz",
      "",
      "0",
      "0",
      "123.45",
      "-123.45",
      "-1",
      "-0",
      "0",
      "3",
      "12",
      "false",
      "true",
      "false",
      "false",
      "true",
      "false",
      "false",
      "true",
      "false",
      "false",
      "false",
      "false",
      "true",
      "true",
      "foobarbaz",
      "1.739750859191E9",
      "<native fn>"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testInterpret[inputs/interpret/control_flow.lox]=[
  {
    "code": 0,
    "outLines": [
      "ok 1",
      "ok 2",
      "ok 3",
      "ok 4",
      "ok 5",
      "ok 6",
      "0",
      "1",
      "2",
      "3",
      "4",
      "5",
      "6",
      "7",
      "8",
      "9",
      "ok 7",
      "ok 8",
      "101",
      "11",
      "2",
      "1.1",
      "ok 9",
      "ok",
      "false",
      "foo",
      "nil",
      "67"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testInterpret[inputs/interpret/counter.lox]=[
  {
    "code": 0,
    "outLines": [
      "1",
      "2"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testInterpret[inputs/interpret/functions.lox]=[
  {
    "code": 0,
    "outLines": [
      "<fn foo>",
      "nil",
      "<fn println>",
      "<fn println>",
      "<fn plus1>",
      "8",
      "<fn plus2>",
      "0",
      "<fn fib>",
      "0",
      "0",
      "1",
      "1",
      "2",
      "55"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testInterpret[inputs/interpret/scope.lox]=[
  {
    "code": 0,
    "outLines": [
      "nil",
      "7",
      "nil",
      "7",
      "here",
      "4",
      "5",
      "6",
      "7",
      "4",
      "7",
      "3",
      "5",
      "1",
      "2",
      "3"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testInterpret[inputs/interpret/statements.lox]=[
  {
    "code": 0,
    "outLines": [
      "5",
      "hello, world!",
      "true",
      "nil",
      "false",
      "5",
      "nil",
      "9",
      "foo",
      "2"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testInterpret[inputs/interpret/undefined_error.lox]=[
  {
    "code": 70,
    "outLines": [ ],
    "errLines": [
      "Error: Undefined variable: 'foo'"
    ]
  }
]


dev.dhc.lox.IntegrationTest.testParse[inputs/parse/empty.lox]=[
  {
    "code": 0,
    "outLines": [ ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testParse[inputs/parse/expressions.lox]=[
  {
    "code": 0,
    "outLines": [
      "true",
      "false",
      "123.45",
      "foo bar baz",
      "nil",
      "(group foo)",
      "(! true)",
      "(/ (* 16.0 38.0) 58.0)",
      "(- (+ 52.0 80.0) 94.0)",
      "(< (< 83.0 99.0) 115.0)",
      "(== baz baz)",
      "foo",
      "(assign x (+ y 7.0))",
      "(call foo [])",
      "(call foo [1.0])",
      "(call foo [1.0, 2.0, 3.0, 4.0, 5.0])",
      "(call (call (call foo []) []) [])",
      "(call (call (call foo [1.0]) [2.0]) [3.0])",
      "(call (call (call foo []) [1.0]) [3.0, 4.0])"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testParse[inputs/parse/parser_errors.lox]=[
  {
    "code": 0,
    "outLines": [ ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testParse[inputs/parse/values.lox]=[
  {
    "code": 0,
    "outLines": [
      "true",
      "false",
      "nil",
      "foo bar baz",
      "",
      "0.0",
      "0.0",
      "123.45",
      "(- 123.45)",
      "(- 1.0)",
      "(- 0.0)",
      "(group (group (group 0.0)))",
      "(+ 1.0 2.0)",
      "(* 3.0 4.0)",
      "(< 5.0 3.0)",
      "(> 2.0 1.0)",
      "(<= 1.0 0.0)",
      "(>= 7.0 9.0)",
      "(== foo foo)",
      "(== 1.0 2.0)",
      "(== nil false)",
      "(== true true)",
      "(!= true true)",
      "(== (group (* (/ (group (- 1.0 2.0)) (group (+ 3.0 4.0))) 5.0)) (group (+ 3.0 4.0)))"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testTokenize[inputs/tokenize/empty.lox]=[
  {
    "code": 0,
    "outLines": [
      "EOF  null"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testTokenize[inputs/tokenize/scanner_errors.lox]=[
  {
    "code": 65,
    "outLines": [
      "EOF  null"
    ],
    "errLines": [
      "[line 1] Error: Unexpected character: #",
      "[line 2] Error: Unterminated string."
    ]
  }
]


dev.dhc.lox.IntegrationTest.testTokenize[inputs/tokenize/test.lox]=[
  {
    "code": 0,
    "outLines": [
      "VAR var null",
      "IDENTIFIER language null",
      "EQUAL = null",
      "STRING \"lox\" lox",
      "SEMICOLON ; null",
      "EOF  null"
    ],
    "errLines": [ ]
  }
]


dev.dhc.lox.IntegrationTest.testTokenize[inputs/tokenize/tokens.lox]=[
  {
    "code": 0,
    "outLines": [
      "LEFT_PAREN ( null",
      "LEFT_PAREN ( null",
      "RIGHT_PAREN ) null",
      "LEFT_BRACE { null",
      "LEFT_BRACE { null",
      "LEFT_BRACE { null",
      "RIGHT_BRACE } null",
      "RIGHT_BRACE } null",
      "LEFT_BRACE { null",
      "RIGHT_BRACE } null",
      "LEFT_BRACE { null",
      "LEFT_BRACE { null",
      "LEFT_BRACE { null",
      "RIGHT_BRACE } null",
      "COMMA , null",
      "DOT . null",
      "MINUS - null",
      "PLUS + null",
      "SEMICOLON ; null",
      "STAR * null",
      "EQUAL = null",
      "EQUAL_EQUAL == null",
      "EQUAL_EQUAL == null",
      "EQUAL = null",
      "EQUAL_EQUAL == null",
      "EQUAL_EQUAL == null",
      "EQUAL_EQUAL == null",
      "EQUAL_EQUAL == null",
      "EQUAL = null",
      "BANG_EQUAL != null",
      "BANG ! null",
      "LESS < null",
      "GREATER > null",
      "LESS_EQUAL <= null",
      "GREATER_EQUAL >= null",
      "EQUAL = null",
      "SLASH / null",
      "SLASH / null",
      "STRING \"\" ",
      "STRING \"foo\" foo",
      "STRING \"foo bar baz\" foo bar baz",
      "STRING \"123.45\" 123.45",
      "NUMBER 1 1.0",
      "NUMBER 1.2 1.2",
      "NUMBER 123.45 123.45",
      "NUMBER 0 0.0",
      "NUMBER 0.0 0.0",
      "IDENTIFIER foo null",
      "IDENTIFIER bar null",
      "IDENTIFIER baz null",
      "AND and null",
      "OR or null",
      "IDENTIFIER andor null",
      "IDENTIFIER _ null",
      "IDENTIFIER _foo null",
      "IDENTIFIER foo_bar null",
      "CLASS class null",
      "ELSE else null",
      "FALSE false null",
      "FUN fun null",
      "FOR for null",
      "IF if null",
      "NIL nil null",
      "PRINT print null",
      "RETURN return null",
      "SUPER super null",
      "THIS this null",
      "TRUE true null",
      "VAR var null",
      "WHILE while null",
      "EOF  null"
    ],
    "errLines": [ ]
  }
]